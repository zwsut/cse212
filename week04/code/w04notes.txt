Inserting at the head usually requires a four step process:

Create a new node (we will call it newNode)
Set the "next" of the new node to the current head (newNode.Next = head)
Set the "prev" of the current head to the new node (head.Prev = newNode)
Set the head equal to the new node (head = newNode)
Shows a doubly linked list made up of 5 nodes with values of 8, 12, 31, 15, and 4.  The four step process to add 42 to the beginning (HEAD) is shown: 1) Create a new node with value 42; 2) Connect NEXT of the new node to the node with value 8 (the HEAD); 3) Connect PREV from the node containing 8 to the new node; 4) Set HEAD equal to the new node.
Inserting at the Head of Linked List
There is a special case that exists for inserting at the head (and also inserting at the tail). If the linked list is empty (head == null)) then all we have to do is set both the head and the tail to the new node we created.

Inserting at the tail is similar to inserting at the head. The same four steps are followed but with respect to the tail the following should happen:

Create a new node (we will call it newNode)
Set the "prev" of the new node to the current tail (newNode.Prev = tail)
Set the "next" of the current tail to the new node (tail.Next = newNode)
Set the tail equal to the new node (tail = newNode)
Shows a doubly linked list made up of 5 nodes with values of 8, 12, 31, 15, and 4.  The four step process to add 23 to the end (TAIL) is shown: 1) Create a new node with value 23; 2) Connect PREV of the new node to the node with value 4 (the TAIL); 3) Connect NEXT from the node containing 4 to the new node; 4) Set TAIL equal to the new node.
Inserting at the Tail of a Linked List
The process for inserting into the middle is a little more complicated. In the picture below, we are trying to insert after node current. The process involves five steps as follows:

Create a new node (we will call it newNode)
Set the "prev" of the new node to the current node (newNode.Prev = current)
Set the "next" of the new node to the next node after current (newNode.Next = current.Next)
Set the "prev" of the "next" node after current to the new node (current.Next.Prev = newNode)
Set the next of the current node to the new node (current.Next = newNode)
Shows a doubly linked list made up of 5 nodes with values of 8, 12, 31, 15, and 4.  The four step process to add 50 after the node with 31 (called CURRENT NODE) is shown: 1) Create a new node with value 50; 2) Connect PREV of the new node to the CURRENT NODE; 3) Connect NEXT from the new node to the node after CURRENT NODE (15); 4) Set the PREV of the node after CURRENT NODE to the new node; 5) Set the NEXT of the CURRENT NODE to the new node.
Inserting in the Middle of a Linked List
Removing from a Linked List
Removing the first (the head) or the last (this tail) node from a linked list is similar and involves updating the second node (or the second to last node in the case of removing from the tail). The process for removing the first node is as follows:

Set the "prev" of the second node (head.Next) to nothing (head.Next.Prev = null)
Set the head to be the second node (head = head.Next)
As a special case, if there was only one node in the linked list, the head and tail would need to be set to null thus creating an empty linked list.

Shows a doubly linked list made up of 5 nodes with values of 8, 12, 31, 15, and 4.  The two step process to remove 8 (HEAD): 1) Set the PREV of the second node (12) to nothing; 2) Set the HEAD to the second node.
Remove the Head from the Linked List
The process for removing the last node is as follows:

Set the "next" of the second to last node (tail.Prev) to nothing (tail.Prev.Next = null)
Set the tail to be the second to last node (tail = tail.Prev)
Shows a doubly linked list made up of 5 nodes with values of 8, 12, 31, 15, and 4.  The two step process to remove 4 (TAIL): 1) Set the NEXT of the second to last node (15) to nothing; 2) Set the TAIL to the second to last node.
Remove the Tail from the Linked List
The process to remove from the middle is not as complicated as inserting from the middle. In the picture below, we are trying to remove the node current. The process involves two steps:

Set the prev of the node after current to the node before current (current.Next.Prev = current.Prev)
Set the next of the node before current to the node after current (current.Prev.Next = current.Next)
Shows a doubly linked list made up of 5 nodes with values of 8, 12, 31, 15, and 4.  The two step process to remove the node with 31 (called the CURRENT NODE): 1) Set the PREV of the node after the CURRENT NODE (15) to the node before the CURRENT NODE (12); 2) Set the NEXT of the node before the CURRENT NODE to the node after the CURRENT NODE.
Remove from the Middle from the Linked List
Accessing from a Linked List
If we want to find a value in the linked list or if we want to find a specific node (for example, the 3rd node or the 10th node), we are required to loop through the linked list. We can start at either the head (if we want to go forward through the list) or we can start at the tail (if we want to go backward through the list). To loop through the list, we will follow the "next" (or the "prev" if going backwards from tail) links until we get to the end. The following code shows a basic traversal through a linked list.


private void GoForward()
{
    // Start at the beginning (the head)
    var current = _head;
    
    // Loop until we have reached the end (null)
    while (current != null)
    {
        // Do something with the current node
        Console.WriteLine(current.Data);
        
        // Follow the pointer to the next node
        current = current.Next;
    }
}
Linked Lists in C#
In your assignment this week you will be writing your own linked list class. However, C# does include a linked list class LinkedList<T>. The table below shows the common functions in the LinkedList.

Common Linked List Operation	Description	C# Code	Performance
insert_head(value)	Adds "value" before the head	linkedList.AddFirst(value)	O(1) - Just need to adjust the pointers near the head.
insert_tail(value)	Adds "value" after the tail	linkedList.AddLast(value)	O(1) - Just need to adjust the pointers near the tail.
insert(node, value)	Adds "value" after node "node".	linkedList.AddAfter(node, value)	O(n) - It's not complicated to adjust the pointers to insert, but it takes a loop to find the node to insert after.
remove_head()	Removes the first item (the head)	linkedList.RemoveFirst()	O(1) - Adjusts the pointers near the head.
remove_tail(index)	Removes the last item (the tail)	linkedList.RemoveLast()	O(1) - Just need to adjust the pointers near the head.
remove(node)	Removes node "node".	linkedList.Remove(node)	O(n) - It's not complicated to adjust the pointers to remove, but it takes a loop to find the node to remove.
size()	Return the size of the linked list	linkedList.Count	O(1) - The size is maintained within the linked list class.
empty()	Returns true if the length of the linked list is zero.	if (linkedList.Count == 0)	O(1) - The comparison of the length with 0 is all that is needed.